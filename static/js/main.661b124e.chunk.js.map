{"version":3,"sources":["requests/axios.js","requests/requests.js","Components/Row/Row.js","Components/Banner/Banner.js","Components/Nav/Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","trailerQuery","Row","title","movie_request","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","responseData","data","results","fetchData","fetchMovieTrailer","movie","id","toString","then","console","log","key","catch","error","className","map","Tooltip","placement","original_name","original_title","onClick","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","Banner","str","n","setMovie","Math","floor","random","length","fetchSingleMovie","style","backgroundSize","backgroundImage","backgroundPosition","name","overview","substr","Nav","showNavBar","handleShowNavBar","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.661b124e.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;\r\n","const API_KEY = \"af6c6f2c04f9d6d4604ab5b5d17461ee\"; //api key from TMDB\r\n\r\n//request parameters to fetch all genre movies\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&languages=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&languages=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n  trailerQuery: `/videos?api_key=${API_KEY}`,\r\n};\r\n\r\nexport default requests;\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport axios from \"../../requests/axios\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport requests from \"../../requests/requests\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nconst POSTER_URL = \"https://image.tmdb.org/t/p/original\"; //base url to load images\r\n\r\nfunction Row({ title, movie_request, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]); // store movie data\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\"); //store trailer url\r\n\r\n  // useEffect to fetch movie data from TMDB using axios\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const responseData = await axios.get(movie_request);\r\n      setMovies(responseData.data.results);\r\n    };\r\n    fetchData();\r\n  }, [movie_request]);\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const fetchMovieTrailer = async (movie) => {\r\n    await axios\r\n      .get(\"/movie/\" + movie?.id.toString() + requests.trailerQuery)\r\n      .then((responseData) => {\r\n        console.log(responseData.data.results);\r\n        setTrailerUrl(responseData.data.results[0]?.key);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  //fetch trailer url when a movie is clicked\r\n  const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      fetchMovieTrailer(movie);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h3>{title}</h3>\r\n      <div className=\"row__posters\">\r\n        {movies.map((movie) => (\r\n          <Tooltip\r\n            placement=\"bottom\"\r\n            title={movie?.original_name || movie?.original_title}\r\n            key={movie.id}\r\n          >\r\n            <img\r\n              className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n              onClick={() => handleClick(movie)}\r\n              src={`${POSTER_URL}${\r\n                isLargeRow ? movie.poster_path : movie.backdrop_path\r\n              }`}\r\n              alt={movie.original_title}\r\n            />\r\n          </Tooltip>\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"../../requests/axios\";\r\nimport requests from \"../../requests/requests\";\r\nimport \"./Banner.css\";\r\n\r\nconst POSTER_URL = \"https://image.tmdb.org/t/p/original\"; //base url to load images\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchSingleMovie = async () => {\r\n      const responseData = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        responseData.data.results[\r\n          Math.floor(Math.random() * responseData.data.results.length - 1)\r\n        ]\r\n      );\r\n    };\r\n    fetchSingleMovie();\r\n  }, []);\r\n  //function that truncates description to just 150 characters\r\n  function truncate(str, n) {\r\n    return str?.length > n ? str.substr(0, n - 1) + \" ...\" : str;\r\n  }\r\n  return (\r\n    //header to display image\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(${POSTER_URL}${movie.backdrop_path})`,\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner__contents\">\r\n        {/* title */}\r\n        <h1 className=\"banner__title\">\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n        {/* 2 buttons */}\r\n        <div className=\"banner__buttons\">\r\n          <button className=\"banner__button\">Play</button>\r\n          <button className=\"banner__button\">My List</button>\r\n        </div>\r\n        {/* description */}\r\n        <h1 className=\"banner__description\">\r\n          {truncate(movie?.overview, 150)}\r\n        </h1>\r\n      </div>\r\n      <div className=\"banner--fadeBottom\" />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Nav.css\";\r\nfunction Nav() {\r\n  const [showNavBar, handleShowNavBar] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        handleShowNavBar(true);\r\n      } else {\r\n        handleShowNavBar(false);\r\n      }\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`nav ${showNavBar && \"nav__bar\"}`}>\r\n      <img\r\n        className=\"nav__logo\"\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\r\n        alt=\"Netflix logo\"\r\n      />\r\n      <img\r\n        className=\"nav__avatar\"\r\n        src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\r\n        alt=\"Netflix avatar\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Row from \"./Components/Row/Row\";\nimport requests from \"./requests/requests\";\nimport Banner from \"./Components/Banner/Banner\";\nimport Nav from \"./Components/Nav/Nav\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/* Nav bar */}\n      <Nav />\n      {/* Banner */}\n      <Banner />\n      {/* Rows */}\n      <Row\n        title={\"NETFLIX ORIGINALS\"}\n        movie_request={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title={\"Trending Now\"} movie_request={requests.fetchTrending} />\n      <Row title={\"Top Rated\"} movie_request={requests.fetchTopRated} />\n      <Row title={\"Action Movies\"} movie_request={requests.fetchActionMovies} />\n      <Row title={\"Comedy Movies\"} movie_request={requests.fetchComedyMovies} />\n      <Row title={\"Horror Movies\"} movie_request={requests.fetchHorrorMovies} />\n      <Row\n        title={\"Romance Movies\"}\n        movie_request={requests.fetchRomanceMovies}\n      />\n      <Row\n        title={\"Documentaries\"}\n        movie_request={requests.fetchDocumentaries}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}